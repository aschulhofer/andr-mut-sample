apply plugin: "at.woodstick.pimutdroid"

pimut {
    pitest {
        failWhenNoMutations = false
        exportLineCoverage = true
        outputFormats = ["XML", "HTML"]
        timeoutConstInMillis = 15000

//        targetClasses = ["at.woodstick.mysampleapplication.*"]
//        targetTests = ["at.woodstick.mysampleapplication.*"]

        mutators = [
            "INCREMENTS",
            "VOID_METHOD_CALLS",
            "RETURN_VALS",
            "MATH",
            "NEGATE_CONDITIONALS",
            "INVERT_NEGS",
            "CONDITIONALS_BOUNDARY",
            "REMOVE_CONDITIONALS"
        ]
    }

    buildConfiguration {
        standard {
            targetMutants = [
                "at.woodstick.mysampleapplication.*"
            ]
        }

        utils {
            targetMutants = [
                "at.woodstick.mysampleapplication.util.*"
            ]
            mutators = [
                "NEGATE_CONDITIONALS",
                "REMOVE_CONDITIONALS"
            ]
            maxMutationsPerClass = 5
        }

        mainActivity {
            targetMutants = [
                "at.woodstick.mysampleapplication.MainActivity"
            ]
            mutators = [
                "VOID_METHOD_CALLS",
            ]
            maxMutationsPerClass = 2
        }

        activities {
            targetMutants = [
                "at.woodstick.mysampleapplication.MainActivity",
                "at.woodstick.mysampleapplication.GSampleActivity",
                "at.woodstick.mysampleapplication.DisplayMessageActivity",
            ]
        }
    }

    instrumentationTestOptions {
        targetMutants = [
            "at.woodstick.mysampleapplication.*"
        ]
    }

    expectedTestResultFilename = "${project.name}-expected-test-result.xml"
//    mutantTestResultFilename = "adb-test-report.xml"
}

// Fix for robolectric manifest not found on pitest tasks
android.applicationVariants.all { variant ->
    logger.debug variant.name.capitalize()

    def variantMatcher = (variant.name =~ /([A-Z]?[^A-Z]*)/)
    List<String> variantPaths = []
    while(variantMatcher.find()) {
        variantPaths.add(variantMatcher.group().toLowerCase())
    }
    def variantPath = variantPaths.join("/")

    def taskName = "copyRobolectricResourcesForPitest${variant.name.capitalize()}"

    def sourceFile = "${projectDir}/src/robolectric/resources/robolectric.properties"
    def targetPath = "${buildDir}/intermediates/sourceFolderJavaResources/test/${variantPath}"

    logger.debug "Add ${taskName} to copy robolectric.properties from ($sourceFile) into $targetPath"

    project.task([type: Copy, group: 'build'], taskName) {
        from sourceFile
        into targetPath
    }
}

project.afterEvaluate {
    logger.debug "Project: ${project.name} evaluated"

    project.getTasks().each { Task task ->
        if (task.getName().startsWith("pitest") && !task.getName().equals("pitest")) {
            logger.debug "Task: ${task.name}"

            def variant = task.getName().replace("pitest", "")
            logger.debug "Variant: $variant"

            task.dependsOn project.tasks.getByName("copyRobolectricResourcesForPitest$variant")
        }
    }
}