evaluationDependsOn(':app')

apply plugin: "com.android.application"
apply plugin: "at.woodstick.pimutdroid"

ext {
    pimutMaxFirstMutants = project.hasProperty('pimutMaxFirstMutants') ? project.getProperty('pimutMaxFirstMutants') as int : null
}

println "Max f muts: ${project.ext.pimutMaxFirstMutants}"

pimut {
    pitest {
        pitestVersion = "1.2.2"

        mainSourceSets = [project(":app").android.sourceSets.main]

        // Not supported in pit gradle plugin android fork
//    testSourceSets = [project(":app").android.sourceSets.test]

        // Not needed when project.group property is set
        targetClasses = ["at.woodstick.mysampleapplication.*"]

        targetTests = ["at.woodstick.mysampleapplication.*"]

        mutators = [
            "INCREMENTS",
            "VOID_METHOD_CALLS",
            "RETURN_VALS",
            "MATH",
            "NEGATE_CONDITIONALS",
            "INVERT_NEGS",
            "CONDITIONALS_BOUNDARY",
            "REMOVE_CONDITIONALS"
        ]

        exportLineCoverage = true

        outputFormats = ["XML", "HTML"]

        threads = 4

        verbose = true

        reportDir = "${project.reporting.baseDir.path}/pitest/custom"
    }

    packageDir = project(":app").android.defaultConfig.applicationId.replaceAll("\\.", "/")
    mutantsDir = "${pitest.reportDir}/debug/$packageDir"
    outputMutateAll = true
    maxFirstMutants = project.ext.pimutMaxFirstMutants

    outputDir = "${project.buildDir}/mutres"
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    sourceSets {
        main {
            res.srcDirs("../app/src/main/res")
            java.srcDirs("../app/src/main/java")
            manifest.srcFile("../app/src/main/AndroidManifest.xml")
        }

        test {
            java.srcDirs("../app/src/test/java")
        }

        androidTest {
            setRoot("../app/src/androidTest")
        }
    }

    testOptions {
        reportDir  "${project.reporting.baseDir.path}/test-reports"
        resultsDir "${project.reporting.baseDir.path}/test-results"
    }
    buildToolsVersion '26.0.2'
}

dependencies {

    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.android.support:appcompat-v7:$supportLibVersion"
    implementation "com.android.support.constraint:constraint-layout:1.0.2"

    androidTestImplementation "com.android.support:support-annotations:$supportLibVersion"

    androidTestImplementation ("com.android.support.test:rules:0.5") {
        exclude group: "com.android.support", module: "support-annotations"
    }
    androidTestImplementation ("com.android.support.test:runner:0.5") {
        exclude group: "com.android.support", module: "support-annotations"
    }
    androidTestImplementation ("com.android.support.test.espresso:espresso-core:$espressoVersion") {
        exclude group: "com.android.support", module: "support-annotations"
    }
    androidTestImplementation ("com.android.support.test.espresso:espresso-contrib:$espressoVersion") {
        exclude group: "com.android.support", module: "support-annotations"
        exclude module: "support-v4"
        exclude module: "support-v13"
        exclude module: "recyclerview-v7"
        exclude module: "design"

    }

    androidTestImplementation ("com.android.support.test.espresso:espresso-intents:$espressoVersion") {

    }

    testImplementation "junit:junit:4.12"

    // newest mockito2 is 2.7.19
    testImplementation "org.mockito:mockito-core:1.10.19"

    // for robolectric and sdk version not 21 or 22
    // java.lang.NoClassDefFoundError: javax/microedition/khronos/opengles/GL
    testImplementation 'org.khronos:opengl-api:gl1.1-android-2.1_r1'

    testImplementation "org.robolectric:robolectric:$robolectricVersion"
}

task("tmutateAll") {
    doLast {
        def gs = new GroovyShell()

        gs.run(
            file("src/main/groovy/hw.groovy"),
            [
                file("../gradlew.bat").path,
                getNumberMutants().toString(),
                true.toString()
            ]
        )
    }
}


task amt {
    doLast {
        println "Ouput dir: ${pimut.outputDir}"

        def resultFile = project.fileTree(dir: "${pimut.outputDir}/debug", include: "*.xml").first()

        def resultXml = new XmlSlurper().parse(resultFile)

        def numTests    = resultXml['@tests']
        def numFailures = resultXml['@failures']
        def numErrors   = resultXml['@errors']
        def numSkipped  = resultXml['@skipped']

        println "Result file: ${resultFile.getName()}"
        println "Test: ${numTests}, failures: ${numFailures}, errors: ${numErrors}, skipped: ${numSkipped}"
    }
}

//gradle.taskGraph.whenReady { graph ->
//
//    def mutantTasks = graph.getAllTasks().findAll {
//        it.name.startsWith("mutant")
//    }
//
//    mutantTasks.each { println it.name }
//
//    if(!mutantTasks.isEmpty()) {
//        project.tasks.mutateAfterCompile.enabled = false
//        project.tasks.afterMutantTest.enabled = false
//    }
//}