evaluationDependsOn(':app')

apply plugin: "pl.droidsonroids.pitest"
apply plugin: "com.android.application"

pitest {
    pitestVersion = "1.2.2"

    mainSourceSets = [project(":app").android.sourceSets.main]

    // Not supported in pit gradle plugin android fork
//    testSourceSets = [project(":app").android.sourceSets.test]

    // Not needed when project.group property is set
    targetClasses = ["at.woodstick.mysampleapplication.*"]

    targetTests = ["at.woodstick.mysampleapplication.*"]

    mutators = [
            "INCREMENTS",
            "VOID_METHOD_CALLS",
            "RETURN_VALS",
            "MATH",
            "NEGATE_CONDITIONALS",
            "INVERT_NEGS",
            "CONDITIONALS_BOUNDARY",
            "REMOVE_CONDITIONALS"
    ]

    exportLineCoverage = true

    outputFormats = ["XML", "HTML"]

    threads = 4

    verbose = true

    reportDir = "${project.reporting.baseDir.path}/pitest/custom"
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    sourceSets {
        main {
            res.srcDirs("../app/src/main/res")
            java.srcDirs("../app/src/main/java")
            manifest.srcFile("../app/src/main/AndroidManifest.xml")
        }

        test {
            java.srcDirs("../app/src/test/java")
        }

        androidTest {
            setRoot("../app/src/androidTest")
        }
    }

//    buildTypes {
//        mutant {
//            applicationIdSuffix ".mutant"
//        }
//    }

//    buildTypes.create("mutant1", {
//        applicationIdSuffix ".mutant1"
//    })

    testOptions {
        reportDir  "${project.reporting.baseDir.path}/test-reports"
        resultsDir "${project.reporting.baseDir.path}/test-results"
    }

//    String packageDir  = project(":app").android.defaultConfig.applicationId.replaceAll("\\.", "/")
//
//    FileTree mutants = fileTree(
//            dir: "${pitest.reportDir}/debug/$packageDir",
//            include: "**/mutants/**/*.class"
//    )
//    int numberMutants = 0;
//
//    mutants.each { File file ->
//        numberMutants++;
//
//        println file.parentFile.parentFile.parentFile.getName()
//        println file.parentFile.getName() + "\t" +  file.getName()
//
//        buildTypes.create("mutant" + numberMutants, {
//            applicationIdSuffix ".mutant" + numberMutants
//            debuggable true
//        })
//    }
}

dependencies {
    ext {
        supportLibVersion = rootProject.ext.supportLibVersion
        espressoVersion = rootProject.ext.espressoVersion
        robolectricVersion = rootProject.ext.robolectricVersion
    }

    compile fileTree(dir: "libs", include: ["*.jar"])
    compile "com.android.support:appcompat-v7:$supportLibVersion"
    compile "com.android.support.constraint:constraint-layout:1.0.2"

    androidTestCompile "com.android.support:support-annotations:$supportLibVersion"

    androidTestCompile ("com.android.support.test:rules:0.5") {
        exclude group: "com.android.support", module: "support-annotations"
    }
    androidTestCompile ("com.android.support.test:runner:0.5") {
        exclude group: "com.android.support", module: "support-annotations"
    }
    androidTestCompile ("com.android.support.test.espresso:espresso-core:$espressoVersion") {
        exclude group: "com.android.support", module: "support-annotations"
    }
    androidTestCompile ("com.android.support.test.espresso:espresso-contrib:$espressoVersion") {
        exclude group: "com.android.support", module: "support-annotations"
        exclude module: "support-v4"
        exclude module: "support-v13"
        exclude module: "recyclerview-v7"
        exclude module: "design"

    }

    androidTestCompile ("com.android.support.test.espresso:espresso-intents:$espressoVersion") {

    }

    testCompile "junit:junit:4.12"

    // newest mockito2 is 2.7.19
    testCompile "org.mockito:mockito-core:1.10.19"

    // for robolectric and sdk version not 21 or 22
    // java.lang.NoClassDefFoundError: javax/microedition/khronos/opengles/GL
    testCompile 'org.khronos:opengl-api:gl1.1-android-2.1_r1'

    testCompile "org.robolectric:robolectric:$robolectricVersion"
}

def getMutants() {
    String packageDirTask  = project(":app").android.defaultConfig.applicationId.replaceAll("\\.", "/")

    FileTree mutantsTask = fileTree(
            dir: "${pitest.reportDir}/debug/$packageDirTask",
            include: "**/mutants/**/*.class"
    )

    return mutantsTask;
}

def getNumberMutants() {
    return getMutants().getFiles().size()
}

apply plugin: TestPlugin

greeting {
    message = "Hi from Gradle"
    wat = "wat wat"
    numTasks = getNumberMutants()
    packageDir = project(":app").android.defaultConfig.applicationId.replaceAll("\\.", "/")
    mutantsDir = "${pitest.reportDir}/debug/$packageDir"
}

class TestPluginExtension {
    String message
    String wat
    int numTasks
    String packageDir
    String mutantsDir
}

class TestPlugin implements Plugin<Project> {

    def Project target;

    def getMutants() {
        FileTree mutantsTask = target.fileTree(
            dir: target.greeting.mutantsDir,
            include: "**/mutants/**/*.class"
        )

        return mutantsTask;
    }

    def getNumberMutants() {
        return getMutants().getFiles().size()
    }

    def classFileNameToRelativePackagePath(def className) {
        def pathSegs = className.split("\\.")

        // remove class segment and file name
        pathSegs = (pathSegs - pathSegs[-1] - pathSegs[-2])

        return pathSegs.join("/")
    }

    def classFileNameWithoutRelativePackagePath(def className) {
        def pathSegs = className.split("\\.")
        return pathSegs[-2] + "." + pathSegs[-1]
    }

    def getTargetFileInfoFromMutantClass(def className) {
        def pathSegs = className.split("\\.")

        def fileName = pathSegs[-2] + "." + pathSegs[-1];

        // remove class segment and file name
        pathSegs = (pathSegs - pathSegs[-1] - pathSegs[-2])

        def filePath = pathSegs.join("/")

        return [name: fileName, path: filePath]
    }

    @Override
    void apply(Project project) {

        this.target = project;

        project.extensions.create("greeting", TestPluginExtension)

        project.task("hello") {
            group 'testplugin'

            doLast {
                println project.greeting.message + " " + project.greeting.wat + " " + project.greeting.numTasks
            }
        }

        project.task("createMutants") {
            group 'testplugin'

            dependsOn "pitestDebug"

            doLast {
                println "mutants ready."
            }
        }

        project.task("mutantsList") {
            group 'testplugin'

            doLast {
                int numberMutants = 0;

//                FileTree mutants = project.fileTree(
//                    dir: project.greeting.mutantsDir,
//                    include: "**/mutants/**/*.class"
//                )

                FileTree mutants = getMutants()

                mutants.each { File file ->
                    numberMutants++;

                    println "Mutant $numberMutants" + "\t" + file.parentFile.getName() + "\t" +  file.getName()

                }
            }
        }

        project.task("mutateAfterCompile") {
            ext {
                mutantId = -1
                mutantFile = null
            }

            doFirst {
                println "compileSources done."
            }

            doLast {
                def mutantTargetFileName = classFileNameWithoutRelativePackagePath(mutantFile.getName());
                def mutantTargetRelPath = classFileNameToRelativePackagePath(mutantFile.getName());

                def targetFileInfo = getTargetFileInfoFromMutantClass(mutantFile.getName())

                println "Copy mutant class over debug class"
                println "Mutant file: ${mutantFile.getName()}"

//                println "Target file name: $mutantTargetFileName"
//                println "Target file path: $mutantTargetRelPath"

                println "Target file name: ${targetFileInfo.name}"
                println "Target file path: ${targetFileInfo.path}"

//                println mutantFile.absolutePath
//                println mutantFile.parentFile.absolutePath
//                println "${project.buildDir}/intermediates/classes/debug/${targetFileInfo.path}"

                target.copy {
                    from mutantFile.parentFile.absolutePath
                    into "${project.buildDir}/intermediates/classes/debug/${targetFileInfo.path}"

                    include mutantFile.getName()
                    rename(mutantFile.getName(), targetFileInfo.name)
                }

                println "mutateAfterCompile done for mutant $mutantId."
            }
        }

        project.afterEvaluate {
            println project.greeting.message + " " + project.greeting.wat + " " + project.greeting.numTasks

            project.tasks.compileDebugSources.finalizedBy project.tasks.mutateAfterCompile

//            project.greeting.numTasks.times { index ->
//            getNumberMutants().times { index ->
            getMutants().eachWithIndex { File file, index ->

                println "create task hello $index of ${project.greeting.numTasks}"
                project.task("hello$index") {
                    group 'testplugin'

                    ext {
                        idx = index
                    }

                    doLast {
                        println project.greeting.message + " ($index == $idx), " + file.getName()

                        project.tasks.mutateAfterCompile.mutantFile = file
                        project.tasks.mutateAfterCompile.mutantId = index
                    }

//                    finalizedBy "assembleDebug"

//                    finalizedBy "installDebug"

                    finalizedBy "connectedDebugAndroidTest"
                }
            }
        }
    }
}

task mutate {
    doFirst {
        println "mutate ${project.reporting.baseDir.path}"

//        pitest.reportDir = "${project.reporting.baseDir.path}/pitest/custom"

        println "Report dir is ${pitest.reportDir}"
    }

    finalizedBy "pitestDebug"
}

task createMutantBuildTasks {

    doFirst {

    }

    doLast {
        String packageDirTask  = project(":app").android.defaultConfig.applicationId.replaceAll("\\.", "/")
        int numberMutantsTask = 0;

        FileTree mutantsTask = fileTree(
                dir: "${pitest.reportDir}/debug/$packageDirTask",
                include: "**/mutants/**/*.class"
        )

        println "Build task apk for mutant ${pitest.reportDir}/debug/$packageDirTask"

        mutantsTask.each { File file ->
            numberMutantsTask++;

            println "Build task apk for mutant $numberMutantsTask"

            task "buildApkMutant$numberMutantsTask" {
                group "mutate"

                doLast {
                    println "Build apk for mutant $numberMutantsTask"
                }
            }
        }
    }

    dependsOn "mutate"
}

task preMutate {
    doFirst {

        // Backup compiled debug class files
        copy {
            from "${project.buildDir}/intermediates/classes/debug"
            into "${project.buildDir}/intermediates/classes/debugOrg"
        }

        // Backup original debug apk
        copy {
            from "${project.buildDir}/outputs/apk/${project.name}-debug.apk"
            into "${project.buildDir}/outputs/apk/"

            include "${project.name}-debug.apk"

            rename("${project.name}-debug.apk", "${project.name}-debug.org.apk")
//            rename { String filename ->
//                filename.replace("${project.name}-debug.apk", "${project.name}-debug.org.apk")
//            }
        }
    }
}

task mutateApk {
    doFirst {

    }

    doLast {
        String packageDir  = project(":app").android.defaultConfig.applicationId.replaceAll("\\.", "/")
        int numberMutants = 0;

        FileTree mutants = fileTree(
            dir: "${pitest.reportDir}/debug/$packageDir",
            include: "**/mutants/**/*.class"
        )

        mutants.each { File file ->
            numberMutants++;
            println "Mutant $numberMutants" + "\t" + file.parentFile.getName() + "\t" +  file.getName()

            if(numberMutants == 1) {
                println "Assemble Mutant $numberMutants" + "\t" + file.parentFile.getName() + "\t" +  file.getName()
                tasks.assembleDebug.execut()
            }
        }
    }
}

task afterCompileSources {
    group 'build'

    doFirst {
        println "compileSources done."
    }

    doLast {
        println "afterCompileSources done."
    }
}

gradle.projectsEvaluated {

    println 'Gradle projects evaluated start.'

//    afterCompileSources.dependsOn compileDebugSources
//    afterCompileSources.mustRunAfter compileDebugSources

    compileDebugSources.finalizedBy afterCompileSources

    println 'Gradle projects evaluated end.'
}

task listMutants {
    doFirst {

    }

    doLast {
        String packageDir  = project(":app").android.defaultConfig.applicationId.replaceAll("\\.", "/")
        int numberMutants = 0;

        FileTree mutants = fileTree(
            dir: "${pitest.reportDir}/debug/$packageDir",
            include: "**/mutants/**/*.class"
        )

        mutants.each { File file ->
            numberMutants++;

            println "Mutant $numberMutants" + "\t" + file.parentFile.getName() + "\t" +  file.getName()
        }
    }
}


task testPackageToPath {

    def className = "at.woodstick.mysampleapplication.DisplayMessageActivity.class"

    doLast {
        def pathSegs = className.split("\\.")
        pathSegs = (pathSegs - pathSegs[-1])

        pathSegs.each { val ->
            println "value: $val"
        }

        println pathSegs.join("/") + ".class"
    }

}